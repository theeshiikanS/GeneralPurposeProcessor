library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity ALU is
	port(Clock 		: in std_logic; --input clock signal
		A,B 			: in unsigned (7 downto 0); -- 8 bit inputs from latches A and B
		student_id 	: in unsigned(3 downto 0); --4 bit student id from FSM
		OP 			: in unsigned (15 downto 0); --16 bit selector for Operation from Decoder
		Neg			: out std_logic;
		R1				: out unsigned (3 downto 0);
		R2				: out unsigned (3 downto 0));
	end ALU;
	
	architecture calculation of ALU is 
	signal Reg1,Reg2,Result : unsigned(7 downto 0) := (others => '0');
	signal Reg4 : unsigned(0 to 7);
	begin
	Reg1 <= A;
	Reg2 <= B;
	process(Clock, OP)
	Begin
		if(rising_edge(Clock)) THEN 
		neg <= '0';
		case OP is
			When "0000000000000001" =>
			-- Do Addition for Reg1 and Reg2
			result <= A + B;
			
			When "0000000000000010" =>
			-- Do subtraction 
			-- Neg bit set if required
			if (A < B) then
			neg <= '1';
			result <= B - A;
			else 
			result <= A - B; 
			end if;
			
			When "0000000000000100" =>
			-- do inverse
			result <= NOT A;
			
			When "0000000000001000" =>
			-- do boolean nand
			result <= NOT (A and B); 
			
			When "0000000000010000" =>
			-- do boolean Nor
			result <= NOT (A OR B);
			
			When "0000000000100000" =>
			-- do boolean AND
			result <= A AND B;
			
			When "0000000001000000" =>
			-- do boolean xor
			result <= (A AND (NOT B)) OR ((NOT A) AND B);
			
			When "0000000010000000" =>
			-- do boolean or
			result <= A OR B;
			
			When "0000000100000000" =>
			-- do boolean Xnor
			result <= NOT((A AND (NOT B)) OR ((NOT A) AND B));
			
			When others => 
			-- Dont care, do nothing
			
			end case;
		end if;
	end process;
R1 <= Result(3 downto 0);
R2 <= Result(7 downto 4);
end calculation;
			
			
	